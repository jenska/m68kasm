package parser

import (
	"testing"
)

func TestParseInstruction_LabelAndMnemonic(t *testing.T) {
	ins, err := ParseInstruction(0x100, "start:  dc.w  $1234, label+2", 1, false)
	if err != nil {
		t.Fatal(err)
	}
	if ins.Label != "start" {
		t.Errorf("Label = %q, want \"start\"", ins.Label)
	}
	if ins.Mnemonic != "DC.W" {
		t.Errorf("Mnemonic = %q, want \"DC.W\"", ins.Mnemonic)
	}
	if len(ins.Operands) != 2 {
		t.Errorf("Operands = %d, want 2", len(ins.Operands))
	}
}

func TestEvaluateExpr_Basic(t *testing.T) {
	ctx := EvalContext{Symbols: map[string]int{"foo": 5}}
	tests := []struct {
		expr string
		want int
	}{
		{"1+2*3", 7},
		{"(1+2)*3", 9},
		{"$10+1", 17},
		{"foo*2+1", 11},
	}
	for _, tt := range tests {
		got, err := EvaluateExpr(tt.expr, ctx)
		if err != nil {
			t.Errorf("expr %q: %v", tt.expr, err)
		}
		if got != tt.want {
			t.Errorf("expr %q: got %d, want %d", tt.expr, got, tt.want)
		}
	}
}